{"version":3,"sources":["services/movieApi.js","components/SearchFilm/SearchFilm.js","components/SearchFilmList/SearchFilmList.js","pages/MoviesPage/MoviesPage.js"],"names":["BASE_URL","API_KEY","fetchTrend","axios","get","then","response","data","results","fetchMoviesBySearch","search","page","fetchMovieDetails","movieId","fetchMovieCredits","fetchMoviesReviews","SearchFilm","onSubmit","useState","value","setValue","formReset","e","preventDefault","trim","toast","error","className","type","autoComplete","autoFocus","placeholder","onChange","currentTarget","toLowerCase","FilmsList","films","url","useRouteMatch","console","log","map","id","original_title","to","MoviesPage","location","useLocation","history","useHistory","setSearch","setfilms","useEffect","push","moviesAPI","catch","Error","Container"],"mappings":"yIAAA,+LAEMA,EAAW,+BACXC,EAAU,mCAET,SAASC,IACd,OAAOC,IACJC,IADI,UACGJ,EADH,qCACwCC,IAC5CI,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,WAG/B,SAASC,EAAoBC,GAAmB,IAAXC,EAAU,uDAAH,EACjD,OAAOR,IACJC,IADI,UAEAJ,EAFA,iCAEiCC,EAFjC,kBAEkDS,EAFlD,iBAEiEC,EAFjE,wBAIJN,MAAK,SAACC,GAAD,OAAcA,EAASC,QAG1B,SAASK,EAAkBC,GAChC,OAAOV,IACJC,IADI,UACGJ,EADH,kBACqBa,EADrB,oBACwCZ,EADxC,oBAEJI,MAAK,SAACC,GAAD,OAAcA,EAASC,QAG1B,SAASO,EAAkBD,GAChC,OAAOV,IACJC,IADI,UAEAJ,EAFA,kBAEkBa,EAFlB,4BAE6CZ,EAF7C,oBAIJI,MAAK,qBAAGE,QAGN,SAASQ,EAAmBF,GAAoB,IAAXF,EAAU,uDAAH,EACjD,OAAOR,IACJC,IADI,UAEAJ,EAFA,kBAEkBa,EAFlB,4BAE6CZ,EAF7C,gCAE4EU,IAEhFN,MAAK,qBAAGE,U,gJClCE,SAASS,EAAT,GAAmC,IAAbC,EAAY,EAAZA,SACnC,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAgBMC,EAAY,WAChBD,EAAS,KAGX,OACE,8BACE,uBAAMH,SAhBW,SAACK,GAGpB,GAFAA,EAAEC,iBAEmB,KAAjBJ,EAAMK,OACR,OAAOC,IAAMC,MAAM,0BAErBT,EAASE,GACTE,KASgCM,UAAU,aAAxC,UACE,uBACEA,UAAU,mBACVC,KAAK,OACLC,aAAa,MACbV,MAAOA,EACPW,WAAS,EACTC,YAAY,eACZC,SA5BiB,SAACV,GACxBF,EAASE,EAAEW,cAAcd,MAAMe,kBA6B3B,wBAAQN,KAAK,SAASD,UAAU,oBAAhC,SACE,sBAAMA,UAAU,0BAAhB,2B,WClCK,SAASQ,EAAT,GAA+B,IAAVC,EAAS,EAATA,MAC1BC,EAAQC,cAARD,IAER,OADAE,QAAQC,IAAIH,GAEV,6BACGD,EAAMK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,eAAP,OACT,6BACE,cAAC,IAAD,CAASC,GAAE,UAAKP,EAAL,YAAYK,GAAvB,SAA8BC,KADvBD,QCHF,SAASG,IACtB,IAAMC,EAAWC,cACXC,EAAUC,cAEhB,EAA4B/B,mBAAS,IAArC,mBAAOR,EAAP,KAAewC,EAAf,KACA,EAA0BhC,mBAAS,IAAnC,mBAAOkB,EAAP,KAAce,EAAd,KAyBA,OAnBAC,qBAAU,WACM,KAAX1C,GAGCA,IACFsC,EAAQK,KAAR,2BACKP,GADL,IAEEpC,OAAO,UAAD,OAAYA,MAEpB4C,IACqB5C,GACpBL,MAAK,SAACC,GACL6C,EAAS7C,EAASE,YAGnB+C,MAAMhB,QAAQC,IAAIgB,WAEpB,CAAC9C,IAGF,gCACE,cAAC+C,EAAA,EAAD,UACE,cAACzC,EAAD,CAAYC,SA1BK,SAACE,GACtB+B,EAAU/B,QA2BR,cAACsC,EAAA,EAAD,UACE,cAAC,EAAD,CAAgBrB,MAAOA","file":"static/js/movies-page.0d36183d.chunk.js","sourcesContent":["import axios from \"axios\";\n// const axios = require('axios');\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst API_KEY = \"a746c25728fd41f4fba1ed9293c9d732\";\n\nexport function fetchTrend() {\n  return axios\n    .get(`${BASE_URL}/trending/all/day?api_key=${API_KEY}`)\n    .then((response) => response.data.results);\n}\n\nexport function fetchMoviesBySearch(search, page = 1) {\n  return axios\n    .get(\n      `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${search}&page=${page}include_adult=false`\n    )\n    .then((response) => response.data);\n}\n\nexport function fetchMovieDetails(movieId) {\n  return axios\n    .get(`${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`)\n    .then((response) => response.data);\n}\n\nexport function fetchMovieCredits(movieId) {\n  return axios\n    .get(\n      `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    )\n    .then(({ data }) => data);\n}\n\nexport function fetchMoviesReviews(movieId, page = 1) {\n  return axios\n    .get(\n      `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=${page}`\n    )\n    .then(({ data }) => data);\n}\n","import { useState } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nexport default function SearchFilm({ onSubmit }) {\n  const [value, setValue] = useState(\"\");\n\n  const handleSearchFilm = (e) => {\n    setValue(e.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (value.trim() === \"\") {\n      return toast.error(\"Enter correct request!\");\n    }\n    onSubmit(value);\n    formReset();\n  };\n\n  const formReset = () => {\n    setValue(\"\");\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit} className=\"SearchForm\">\n        <input\n          className=\"SearchForm-input\"\n          type=\"text\"\n          autoComplete=\"off\"\n          value={value}\n          autoFocus\n          placeholder=\"Search movie\"\n          onChange={handleSearchFilm}\n        />\n        <button type=\"submit\" className=\"SearchForm-button\">\n          <span className=\"SearchForm-button-label\">Search</span>\n        </button>\n      </form>\n    </div>\n  );\n}\n\nSearchFilm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { NavLink, useRouteMatch } from \"react-router-dom\";\n\nexport default function FilmsList({ films }) {\n  const { url } = useRouteMatch();\n  console.log(url);\n  return (\n    <ul>\n      {films.map(({ id, original_title }) => (\n        <li key={id}>\n          <NavLink to={`${url}/${id}`}>{original_title}</NavLink>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nFilmsList.propTypes = {\n  films: PropTypes.array.isRequired,\n};\n","import React, { useState, useEffect } from \"react\";\nimport { useHistory, useLocation } from 'react-router-dom';\nimport * as moviesAPI from \"../../services/movieApi\";\nimport Container from \"../../components/Container/Container\";\nimport SearchFilm from \"../../components/SearchFilm/SearchFilm\";\nimport SearchFilmList from \"../../components/SearchFilmList/SearchFilmList\";\n\nexport default function MoviesPage() {\n  const location = useLocation();\n  const history = useHistory();\n\n  const [search, setSearch] = useState(\"\");\n  const [films, setfilms] = useState([]);\n\n  const onSubmitSearch = (value) => {\n    setSearch(value);\n  };\n\n  useEffect(() => {\n    if(search === '') {\n      return;\n    }\n    if (search) {\n      history.push({\n        ...location,\n        search: `?query=${search}`,\n      })\n      moviesAPI\n      .fetchMoviesBySearch(search)\n      .then((response) => {\n        setfilms(response.results);\n        \n      })\n      .catch(console.log(Error));\n    }\n  }, [search]);\n\n  return (\n    <div>\n      <Container>\n        <SearchFilm onSubmit={onSubmitSearch} />\n      </Container>\n      <Container>\n        <SearchFilmList films={films} />\n      </Container>\n    </div>\n  );\n}\n"],"sourceRoot":""}